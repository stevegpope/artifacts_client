import requests
import logging
from work.api import CharacterAPI
import work
import work.tasks

class Smarty:
    def __init__(self, logger: logging.Logger, character: CharacterAPI):
        self.api: CharacterAPI = character
        self.logger = logger

    def call_local_llm(self, prompt):
        self.logger.info(prompt)
        url = "http://localhost:11434/api/generate"
        payload = {
            "model": "llama3.2",
            "prompt": prompt,
            "stream": False
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
        return response.json()['response']
        
    def generate_instructions(self) -> str:
        actions = """work.tasks.craft_gear(self.api);work.tasks.eat(self.api);work.tasks.gear_up(self.api);work.tasks.do_tasks(self.api);work.tasks.hunt_monsters(self.api);"""
        sample = """work.tasks.eat(self.api);work.tasks.gear_up(self.api);work.tasks.hunt_monsters(self.api);"""

        prompt = (
            f"Actions: {actions}\n"
            "Generate tasks to perform in order to become the world's greatest knight, who must be well-rounded.\n"
            "ONLY generate executable code. Do NOT include explanations, comments, or any text other than code.\n"
            "It should generate a single line of code including ONLY the given actions. Here is an example of valid output:\n"
            f"{sample}"
        )
    
        response = self.call_local_llm(prompt)
        print(f"response: {response}")
        return response

    def execute_instructions(self, instructions: str):
        """Executes the instructions generated by the model."""
        try:
            # Inject `self`, `work`, and `work.tasks` into the exec environment
            exec_globals = {
                "self": self,  # so `self.api` works
                "work": work,  # so `work.tasks.whatever` works
            }
            exec(instructions, exec_globals)
        except Exception as e:
            print(f"Error executing instructions: {e}")


    def do_something_smart(self):
        instructions = self.generate_instructions()
        print(f"Generated Instructions:\n{instructions}")
        self.execute_instructions(instructions)
